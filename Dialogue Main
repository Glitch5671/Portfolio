-- Module in replicated storage, or whatnot


local player = game.Players.LocalPlayer

local dialogue = {
	speakername = "Scarlet Raven";
	speakercolor = Color3.fromRGB(255, 76, 94);
	dialogue = "Hey, you! I'm a test NPC for Dialogue. How are you?";
	
	options = {
		["Gross, don't talk to me."] = {
			x = true;
			dialogue = "That's not very nice.. :(";
	--		dialogue2 = "Get out of here whippersnapper!";
		};

		["I'm doing great! So dialogue trees?"] = {
			x = false;
			dialogue = "Yep, I'm currently speaking via an entirely modular system that allows up to 500 total lines of text between responses and options.";
			options = {
				["Cringe, don't talk to me."] = {
					x = true;
	--				dialogue = "That's not very nice.. :(";
					dialogue = "Get out of here morbhead!";
				};
				["Functions on responses? Give me a sick quest!"] = {
					x = true;
					onSelected = function()
						
						local plrGui = player.PlayerGui
						--I almost did a script.Parent here \/ 
						local Modules = game:GetService("ReplicatedStorage"):WaitForChild("Modules",100)
						local Network = require(Modules:WaitForChild("RemoteNetwork")).new()
						Network["AssignQuest"]:FireServer("A_boar'ing_task")
						local PlayerNotificationGui = plrGui:FindFirstChild("PlayerNotificationGui")
						local event = PlayerNotificationGui:FindFirstChildOfClass("BindableEvent")
						local displayText = " Quest Started: ".. "<b>" .. "<font color=\"" .. "rgb(255, 230, 34)" .. "\">" .. "A boar'ing task" .. "</font>" .. "</b>"
						event:Fire(displayText, false, "QuestStarted")
						print("Quest Assigned")
					end;

					dialogue = "Don't worry, I got you."
				}
			}
		};
	};
}

return dialogue


-- Functions within the Dialog GUI to decipher the above module

function DialogSequence(dialogueData, path)
	for i,v in pairs(connections) do
		v:Disconnect()
	end
	if dialogueData then
		local C1 = C1Text.MouseButton1Click:Connect(function()
			if Chatting == true then
				Sounds.Click:Play()
				C1Slot.Selectable = false
				C2Slot.Selectable = false
				C1Text.Selectable = false
				C2Text.Selectable = false
				C1Slot.Visible = false
				C2Slot.Visible = false
				S.Selectable = true
				
				local close = path[C1Text.Text].x	
				DialogRender(false, dialogueData, path[C1Text.Text].dialogue, close, path[C1Text.Text])

				if path[C1Text.Text] and path[C1Text.Text].onSelected then
					path[C1Text.Text].onSelected()
				end
			end
		end)
		table.insert(connections, C1)

		local C2 = C2Text.MouseButton1Click:Connect(function()
			if Chatting == true then
				Sounds.Click:Play()
				C1Slot.Selectable = false
				C2Slot.Selectable = false
				C1Text.Selectable = false
				C2Text.Selectable = false
				C1Slot.Visible = false
				C2Slot.Visible = false
				S.Selectable = true
				
				local close = path[C2Text.Text].x
				DialogRender(false, dialogueData, path[C2Text.Text].dialogue, close, path[C2Text.Text])
				
				if path[C2Text.Text] and path[C2Text.Text].onSelected then
					path[C2Text.Text].onSelected()
				end
			end
		end)
		table.insert(connections, C2)
	end
end

function DialogRender(state, dialogueData, line, close, path)
	D1Text.MaxVisibleGraphemes = 0
	D1Text.Text = line
	for i = 1, #line do
		if Skip.Value == true then
			D1Text.MaxVisibleGraphemes = -1
			Skip.Value = false
			break
		end
		D1Text.MaxVisibleGraphemes = i
		wait(0.01)
		Sounds.Talk:Play()
	end
	if close == true then
		wait(.5)
		Exit.Visible = true
	elseif state ~= true and path.options then
		RenderOptions(dialogueData, path.options)
	end
end


function RenderOptions(dialogueData, options)
	local choice = false
	for i,v in pairs(options) do
		if choice == false then
			choice = true
			C1Text.Text = i
			C1Slot.Selectable = true
			C1Slot.Visible = true
		else
			C2Text.Text = i
			C2Text.Selectable = true
			C2Slot.Visible = true
		end
	end
	DialogSequence(dialogueData, options)
end

local function BeginDialogSequence()
	if Detected == true then
		DetectedNPC:WaitForChild("Main"):WaitForChild("InDialogue").Value = true
		
		if DetectedNPC:GetAttribute("InAnimate") ~= true then
			local humanoid = DetectedNPC.NPC
			local animation2 = DetectedNPC.Main:WaitForChild('Talking')
			talk = humanoid:LoadAnimation(animation2)
			talk.Looped = false
			talk:Play()
		end
		
		Upfront.Enabled = false
		ZoneUI.Enabled = false
		local dialogueData = require(DialogInfo:FindFirstChild(DetectedNPC.Name))
		local SpeakerName = dialogueData.speakername
		local NameColor = dialogueData.speakercolor
		
		
		Speaker.Text = SpeakerName
		Speaker.TextColor3 = NameColor
		DetectedNPC.UpperTorso.DialogPrompt.ProximityPrompt.Enabled = false
		Chatting = true
		Detected = false
		
		DialogRender(true, dialogueData, dialogueData.dialogue, false)
		
		if dialogueData.onSelected then
			dialogueData.onSelected()
		end
		if dialogueData.options then
			RenderOptions(dialogueData, dialogueData.options)
		else
			wait(.5)
			Exit.Visible = true
		end
	end
end
